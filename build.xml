
<project name="RSA" default="help" basedir="."
	 xmlns:jacoco="antlib:org.jacoco.ant">

  <property name="source-directory" value="src"/>
  <property name="test-source-directory" value="test"/>

  <property name="build-directory" value="build"/>
  <property name="doc-directory" value="doc"/>
  
  <property name="junit.jar" value="lib/junit-4.12.jar"/>
  <property name="hamcrest.jar" value="lib/hamcrest-core-1.3.jar"/>

  <!-- JaCoCo Coverage analysis -->
  <taskdef uri="antlib:org.jacoco.ant" 
	   resource="org/jacoco/ant/antlib.xml">
    <classpath path="lib/jacocoant.jar"/>
  </taskdef>

  <property name="test-output-directory" value="TEST-RESULT"/>
  <property name="jacoco.report.dir" 
            value="${test-output-directory}/report" />
  <property name="jacoco.exec" 
            value="${test-output-directory}/jacoco.exec" />


  <!-- define the class path -->
  <path id="class-path">
    <pathelement location="${build-directory}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${hamcrest.jar}"/>
    <pathelement location="${minidraw.jar}"/>
  </path>

  <target name="help">
    <echo>
HotCiv build management for dSoftArk MiniDraw Exercises
  Targets:
    build-src: Builds production code.
    clean:     Removes all bytecode.
    javadoc:   Generate JavaDoc (output in doc/index.html)

    test:        Run JUnit test cases.
    coverage:    Run JUnit tests and generate code coverage report.

    =====
    </echo>
  </target>
  
  <target name="clean">
    <delete dir="${build-directory}"/>
    <delete dir="${doc-directory}"/>
    <delete dir="${test-output-directory}"/>
  </target>
  
  <target name="prepare">
    <mkdir dir="${build-directory}"/>
    <mkdir dir="${doc-directory}"/>
    <mkdir dir="${test-output-directory}"/>
  </target>
  
  <target name="build-src" depends="prepare">
    <javac srcdir="${source-directory}"
	   destdir="${build-directory}"
	   debug="on" 
	   includeantruntime="no" 
	   >
      <classpath refid="class-path"/>
    </javac>
  </target>
  
  <target name="build-test" depends="build-src">
    <javac srcdir="${test-source-directory}"
	   destdir="${build-directory}"
	   debug = "on"
	   includeantruntime="no" 
	   >
      <classpath refid="class-path"/>
    </javac>
  </target>

  <target name="build-all" depends="build-src,build-test"/>

  <target name="mkdirdoc">
    <mkdir dir="${doc-directory}"></mkdir>
  </target>

  <target name="javadoc" depends="clean,build-src,mkdirdoc">
    <javadoc
      source = "1.8"
      packagenames="ddist.*"
      sourcepath="${source-directory}"
      destdir="${doc-directory}"
      package="true"
      doctitle="&lt;b&gt;DistributedTextEditor&lt;/b&gt;"
      bottom="&lt;b&gt;No skeleton code &lt;/b&gt;"
      windowtitle="RSA" >
      <sourcepath> 
	<pathelement path="${source-directory}"/> 
      </sourcepath>
      <classpath> 
	<path refid="class-path"/> 
      </classpath>
    </javadoc>
  </target>

  <!-- JUnit testing -->
  <target name="test"  depends="build-all">
    <junit printsummary="yes" 
           fork="yes" 
	   forkmode="once"
	   haltonfailure="yes">
      <formatter type="plain"/>
      <batchtest fork="yes" todir="${test-output-directory}">
	<fileset dir="test">
	  <include name="**/Test*.java"/>
	</fileset>
      </batchtest>
      <classpath refid="class-path"/>
    </junit>
  </target>

  <!-- Run JUnit with JaCoCo code coverage -->
  <target name="run.junit" depends="build-all">
    <jacoco:coverage destfile="${jacoco.exec}" >
      <junit printsummary="yes" fork="yes" 
	     forkmode="once"
	     haltonfailure="yes">
	<formatter type="plain"/>
	<batchtest fork="yes" todir="${test-output-directory}">
	  <fileset dir="test">
	    <include name="**/Test*.java"/>
	  </fileset>
	</batchtest>
	<classpath refid="class-path"/>
      </junit>
    </jacoco:coverage>
  </target>

  <target name="coverage" depends="run.junit"
	  description="--> Generate code coverage report in the report dir">
    <jacoco:report>
      <executiondata>
        <file file="${jacoco.exec}"/>
      </executiondata>
      <structure name="HotCiv Test" >
        <classfiles>
          <fileset dir="${build-directory}">
	    <include name="**/*.class"/>
	  </fileset>
        </classfiles>
        <sourcefiles encoding="UTF-8" tabwidth="2">
	  <fileset dir="${source-directory}"/>
        </sourcefiles>
      </structure>
      <html destdir="${jacoco.report.dir}"/>
    </jacoco:report>
    <echo message="To see report, browse to index.html at ${jacoco.report.dir}."/>
  </target>

</project>
